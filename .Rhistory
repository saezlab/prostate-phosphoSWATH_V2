unique()
length(PhophositesPDTs))
length(PhophositesPDTs)
PhophositesPDTs
PhophositesOmnipathKEA2 <- unique(c(PhosphositesKEA2,PhophositesOmnipath))
PhophositesOmnipathKEA2
length(PhophositesOmnipathKEA2)
length(PhophositesData)
PhophositesOmnipathKEA2 <- unique(c(PhosphositesKEA2,PhophositesOmnipath))
Venn_plot <- draw.triple.venn(length(PhophositesOmnipathKEA2),
length(PhophositesPDTs),
length(PhophositesData),
n12 = length(dplyr::intersect(PhophositesOmnipathKEA2,PhophositesPDTs)),
n23 = length(dplyr::intersect(PhophositesPDTs, PhophositesData)),
n13 = length(dplyr::intersect(PhophositesOmnipathKEA2, PhophositesData)),
n123 = length(dplyr::intersect(dplyr::intersect(PhophositesOmnipathKEA2,
PhophositesPDTs),
PhophositesData)),
category = c("KEA2 + Omnipath Phosphosites", "PDTs Phosphosites",
"Data Phosphosites"),
lty = rep("blank", 3), fill = c("light blue", "red","orange"),
alpha = rep(0.25, 3), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25, cat.pos = c(330, 30 , 180),
cat.dist = rep(0.075, 3), cat.cex = 1.25)
grid.draw(Venn_plot)
grid.draw(Venn_plot)
428+196+216
428+196
length(dplyr::intersect(PhophositesPDTs, PhophositesData))
PhophositesPDTs
PhophositesData
length(PhophositesData)
2235
dim(ResultsLinearModel)
length(ResultsLinearModel)
ResultsLinearModel$residues_str
PhophositesData <- ResultsLinearModel %>%
#     dplyr::filter(!is.na(GeneSymbol)) %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,sep = "_")) %>%
dplyr::pull(GeneSymbol_Residue) %>%
unique()
length(PhophositesData)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20180911.tsv")
PhophositesData <- ResultsLinearModel %>%
#     dplyr::filter(!is.na(GeneSymbol)) %>%
#     dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,sep = "_")) %>%
dplyr::pull(GeneSymbol_Residue) %>%
unique()
length(PhophositesData)
PhophositesData <- ResultsLinearModel %>%
dplyr::filter(!is.na(GeneSymbol)) %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,sep = "_")) %>%
dplyr::pull(GeneSymbol_Residue)
PhophositesData
length(PhophositesData)
unique(hophositesData)
unique(PhophositesData)
length(unique(PhophositesData))
length(PDTs)
dim(PDTs)
length(PhophositesPDTs
)
5575+83+292+256
dim(PDTs)
5575 + 83 + 292 + 256
length(PhophositesPDTs)
PhophositesOmnipathKEA2
length(PhophositesOmnipathKEA2)
length(PhophositesData)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE,
message = FALSE)
library(readr)
library(dplyr)
library(OmnipathR)
library(VennDiagram)
library(viper)
library(tidyr)
library(pheatmap)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20180911.tsv")
PhophositesData <- ResultsLinearModel %>%
dplyr::filter(!is.na(GeneSymbol)) %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,sep = "_")) %>%
dplyr::pull(GeneSymbol_Residue) %>%
unique()
length(PhophositesData)
Omnipath_df <- import_Omnipath_PTMS() %>%
dplyr::filter(modification %in% c("dephosphorylation","phosphorylation")) %>%
dplyr::mutate(GeneResidue = paste(substrate_genesymbol,(paste0(residue_type,
residue_offset)), sep = "_"))
PhophositesOmnipath <- Omnipath_df %>%
dplyr::pull(GeneResidue)  %>%
unique()
length(PhophositesOmnipath)
KEA2_database_path <- "Data/kinase-substrate_phospho-site_level_set_library.tsv"
## This dataset contains a totally different format. We created the following
## function to convert their enzyme-substrates interactions to the same format
processFile = function(filepath) {
kinases <- character()
substrates <- character()
con = file(filepath, "r")
while ( TRUE ) {
line = readLines(con, n = 1)
if ( length(line) == 0 ) {
break
}
currentLine <- unlist(strsplit(line,"\t"))
currentKinase <- currentLine[1]
Allsubstrates <- currentLine[3:length(currentLine)]
for (j in seq(Allsubstrates)){
kinases <- c(kinases, currentKinase)
substrates <-  c(substrates, Allsubstrates[j])
}
}
close(con)
df <- data.frame(kinases = kinases, substrates = substrates,
stringsAsFactors = FALSE)
return(df)
}
KEA2_df <- processFile(KEA2_database_path)
PhosphositesKEA2 <- unique(KEA2_df$substrates)
length(PhosphositesKEA2)
Venn_plot <- draw.triple.venn(length(PhosphositesKEA2),
length(PhophositesOmnipath),
length(PhophositesData),
n12 = length(dplyr::intersect(PhosphositesKEA2,PhophositesOmnipath)),
n23 = length(dplyr::intersect(PhophositesOmnipath,
PhophositesData)),
n13 = length(dplyr::intersect(PhosphositesKEA2, PhophositesData)),
n123 = length(dplyr::intersect(dplyr::intersect(PhosphositesKEA2,
PhophositesOmnipath),
PhophositesData)),
category = c("KEA2 Phosphosites", "Omnipath Phosphosites",
"Data Phosphosites"),
lty = rep("blank", 3), fill = c("light blue", "red","orange"),
alpha = rep(0.25, 3), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25, cat.pos = c(330, 30 , 180),
cat.dist = rep(0.075, 3), cat.cex = 1.25)
grid.draw(Venn_plot)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_merged <- dplyr::bind_rows(Omnipath_df_reduced, KEA2_df) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged)
#'\code{df_to_viper_regulon}
#'
#'This function is designed to generate a ready to use regulon object for viper
#'from a 3 column dataframe representation of a target set collection.
#'
#'@param df a dataframe of n*3 dimension. The first column corresponds the targets,
#'and the second column indicates which regulon does each target belongs to.
#'The third column corresponds to the weight and sign of the interaction between
#'a regulon and its targets.
#'
#'@return a list where each element is a regulon in the viper format. This list
#'is ready to be used as a regulon set in viper.
df_to_viper_regulon <- function(df)
{
names(df) <- c("feature","pathway","sign")
df <- df[complete.cases(df),]
pathway_regulon <- list(0)
i <- 1
for(pathway in unique(df$pathway))
{
pathway_feature_list <- list(0)
features <- df[df$pathway == pathway, 3]
names(features) <- df[df$pathway == pathway, 1]
pathway_feature_list[[1]] <- features
pathway_feature_list[[2]] <- rep(1,length(features))
names(pathway_feature_list) <- c("tfmode","likelihood")
pathway_regulon[[i]] <- pathway_feature_list
i <- i+1
}
names(pathway_regulon) <- unique(df$pathway)
return(pathway_regulon)
}
KSN_viper <- df_to_viper_regulon(KSN_merged[,c(2,1,3)])
## We transform the results of the linear model into a matrix with the proper
## format for the input to viper
MatrixStatistic <-
ResultsLinearModel %>%
dplyr::filter(!is.na(GeneSymbol)) %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::filter(!(term %in% c("Phospho_batch3","Phospho_batch2",
"Culture_batch","Culture_order","fraction_missing",
"fraction_missing","Intercept"))) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,
sep = "_")) %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::mutate(statistic = mean(statistic)) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
Kin_activity <- t(viper(MatrixStatistic, regulon = KSN_viper,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
paletteLength = 100
myColor = colorRampPalette(c("Darkblue", "white","red"))(paletteLength)
viperBreaks <- c(seq(min(Kin_activity), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(Kin_activity)/paletteLength,
max(Kin_activity),
length.out=floor(paletteLength/2)))
viper_hmap <- pheatmap(t(Kin_activity),fontsize=14,
fontsize_row = 10,
color=myColor, breaks = viperBreaks,
main = "Kinase Activity", angle_col = 45,
treeheight_col = 0,  border_color = NA)
## We read the datasets from Hijazi et al 2020. Supplementary Dataset 3
PDTs <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
PhophositesPDTs <- PDTs %>%
dplyr::pull(substrates)  %>%
unique()
length(PhophositesPDTs)
PhophositesOmnipathKEA2 <- unique(c(PhosphositesKEA2,PhophositesOmnipath))
Venn_plot <- draw.triple.venn(length(PhophositesOmnipathKEA2),
length(PhophositesPDTs),
length(PhophositesData),
n12 = length(dplyr::intersect(PhophositesOmnipathKEA2,PhophositesPDTs)),
n23 = length(dplyr::intersect(PhophositesPDTs, PhophositesData)),
n13 = length(dplyr::intersect(PhophositesOmnipathKEA2, PhophositesData)),
n123 = length(dplyr::intersect(dplyr::intersect(PhophositesOmnipathKEA2,
PhophositesPDTs),
PhophositesData)),
category = c("KEA2 + Omnipath Phosphosites", "PDTs Phosphosites",
"Data Phosphosites"),
lty = rep("blank", 3), fill = c("light blue", "red","orange"),
alpha = rep(0.25, 3), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25, cat.pos = c(330, 30 , 180),
cat.dist = rep(0.075, 3), cat.cex = 1.25)
grid.draw(Venn_plot)
428+216
428+196
length(PDTs)
heaD(PDTs)
head(PDTs)
head(KSN_merged)
KSN_viper_PDTs
KSN_viper_PDTs <- df_to_viper_regulon(PDTs[,c(2,1,3)])
Kin_activity_PDTs <- t(viper(MatrixStatistic, regulon = KSN_viper_PDTs,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
df_to_viper_regulon(PDTs[,c(2,1,3)])
PDTs
head(KSN_viper_PDTs)
KSN_merged
head(KSN_merged)
head(PDTs)
KSN_viper_PDTs <- df_to_viper_regulon(as.data.frame(PDTs[,c(2,1,3)]))
KSN_viper_PDTs
Kin_activity_PDTs <- t(viper(MatrixStatistic, regulon = KSN_viper_PDTs,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
warnings()
Kin_activity_PDTs
paletteLength = 100
myColor = colorRampPalette(c("Darkblue", "white","red"))(paletteLength)
viperBreaks <- c(seq(min(Kin_activity_PDTs), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(Kin_activity_PDTs)/paletteLength,
max(Kin_activity_PDTs),
length.out=floor(paletteLength/2)))
viper_hmap <- pheatmap(t(Kin_activity_PDTs),fontsize=14,
fontsize_row = 10,
color=myColor, breaks = viperBreaks,
main = "Kinase Activity", angle_col = 45,
treeheight_col = 0,  border_color = NA)
viper_hmap
KSN_merged_Allsources <- dplyr::bind_rows(Omnipath_df_reduced, KEA2_df, PDTs_df) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
## We read the datasets from Hijazi et al 2020. Supplementary Dataset 3
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
PhophositesPDTs <- PDTs_df %>%
dplyr::pull(substrates)  %>%
unique()
length(PhophositesPDTs)
PhophositesOmnipathKEA2 <- unique(c(PhosphositesKEA2,PhophositesOmnipath))
Venn_plot <- draw.triple.venn(length(PhophositesOmnipathKEA2),
length(PhophositesPDTs),
length(PhophositesData),
n12 = length(dplyr::intersect(PhophositesOmnipathKEA2,PhophositesPDTs)),
n23 = length(dplyr::intersect(PhophositesPDTs, PhophositesData)),
n13 = length(dplyr::intersect(PhophositesOmnipathKEA2, PhophositesData)),
n123 = length(dplyr::intersect(dplyr::intersect(PhophositesOmnipathKEA2,
PhophositesPDTs),
PhophositesData)),
category = c("KEA2 + Omnipath Phosphosites", "PDTs Phosphosites",
"Data Phosphosites"),
lty = rep("blank", 3), fill = c("light blue", "red","orange"),
alpha = rep(0.25, 3), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25, cat.pos = c(330, 30 , 180),
cat.dist = rep(0.075, 3), cat.cex = 1.25)
grid.draw(Venn_plot)
KSN_viper_PDTs <- df_to_viper_regulon(as.data.frame(PDTs_df[,c(2,1,3)]))
Kin_activity_PDTs <- t(viper(MatrixStatistic, regulon = KSN_viper_PDTs,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
KSN_merged_Allsources <- dplyr::bind_rows(Omnipath_df_reduced, KEA2_df, PDTs_df) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
head(KSN_merged_Allsources)
KSN_viper_Allsources <- df_to_viper_regulon(KSN_merged_Allsources[,c(2,1,3)])
Kin_activity_Allsources <- t(viper(MatrixStatistic, regulon = KSN_viper_Allsources,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
warnings()
paletteLength = 100
myColor = colorRampPalette(c("Darkblue", "white","red"))(paletteLength)
viperBreaks <- c(seq(min(Kin_activity_PDTs), 0,
length.out=ceiling(paletteLength/2) + 1),
seq(max(Kin_activity_PDTs)/paletteLength,
max(Kin_activity_PDTs),
length.out=floor(paletteLength/2)))
viper_hmap <- pheatmap(t(Kin_activity_PDTs),fontsize=14,
fontsize_row = 10,
color=myColor, breaks = viperBreaks,
main = "Kinase Activity", angle_col = 45,
treeheight_col = 0,  border_color = NA)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
head(ResultsLinearModel)
PhophositesData <- ResultsLinearModel %>%
dplyr::filter(!is.na(GeneSymbol)) %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(GeneSymbol_Residue =paste(GeneSymbol,residues_str,sep = "_")) %>%
dplyr::pull(GeneSymbol_Residue) %>%
unique()
length(PhophositesData)
PhophositesData
length(PhophositesData)
tresult <- readr::read_tsv("limma_model_results_20190301.tsv")
tresult <- readr::read_tsv("Data/limma_model_results_20190301.tsv")
tresult
# create sample annotation for using colors with the heatmaps
non_annotated_vars <- c("Intercept", "LNCaP",
"ms_day180409", "ms_day180410", "ms_day180412", "ms_day180414",
"Culture_batch", "fraction_missing")
non_annotated_vars
sample_annotation <- tresult %>% select(term) %>% distinct()
sample_annotation
sample_annotation <- sample_annotation %>% filter(!(term %in% non_annotated_vars)) %>%
separate(term, into=c("cell_line", "inhibitor", "time", "ligand"), sep="_", remove=FALSE)
sample_annotation
sample_annotation <- sample_annotation %>% mutate_if(is.character, as.factor) %>%
as.data.frame()
rownames(sample_annotation) <- sample_annotation$term
sample_annotation <- sample_annotation %>% select(-term)
sample_annotation
url <- 'http://omnipathdb.org/ptms/?genesymbols=yes&fields=sources&fields=references'
ptm_table <- read.table(url, sep = '\t', header = TRUE)
ptm_table <- ptm_table %>% mutate(ProtResidue = paste(substrate, paste(residue_type, residue_offset, sep=""), sep="_"))
head(ptm_table)
# One row for each phosphosite. This may imply duplicating rows.
phosphosite_measurements <- tresult %>%
as.data.frame() %>%
filter(!is.na(residues_str)) %>%
mutate(residues_str = strsplit(residues_str, "_")) %>%
unnest(residues_str) %>%
mutate(ProtResidue = paste(uniprot, residues_str, sep="_"))
head(phosphosite_measurements)
KEA2_database_path <- "Data/kinase-substrate_phospho-site_level_set_library.tsv"
head(KEA2_database_path)
phosphosite_measurements
View(phosphosite_measurements)
View(PhophositesData)
View(ResultsLinearModel)
?AddModuleScore
?unnest
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
PhophositesData <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_")) %>%
dplyr::pull(GeneSymbol_Residue) %>%
unique()
length(PhophositesData)
?draw.quad.venn
## Total overlap
n1234 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,PhophositesOmnipath),
PhosphositesKEA2), PhophositesPDTs)
## Total overlap
n1234 <- length(dplyr::intersect((dplyr::intersect(PhophositesData,PhophositesOmnipath),
## Total overlap
n1234 <- dplyr::intersect(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2),PhophositesPDTs)
n1234
## Individual Sources
area1 <- length(PhophositesData)
area2 <- length(PhophositesOmnipath)
area3 <- length(PhosphositesKEA2)
area4 <- length(PhophositesPDTs)
## Pairwise Overlap between Sources
n12 <- length(dplyr::intersect(PhophositesData,PhophositesOmnipath))
n13 <- length(dplyr::intersect(PhophositesData,PhosphositesKEA2))
n14 <- length(dplyr::intersect(PhophositesData,PhophositesPDTs))
n23 <- length(dplyr::intersect(PhophositesOmnipath,PhosphositesKEA2))
n24 <- length(dplyr::intersect(PhophositesOmnipath,PhophositesPDTs))
n34 <- length(dplyr::intersect(PhosphositesKEA2,PhophositesPDTs))
## Triple overlaps
n123 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2))
n134 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhosphositesKEA2), PhophositesPDTs))
n234 <- length(dplyr::intersect(dplyr::intersect(PhophositesOmnipath,
PhosphositesKEA2), PhophositesPDTs))
## Total overlap
n1234 <- length(dplyr::intersect(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2),PhophositesPDTs))
Venn_plot <- draw.quad.venn(area1, area2, area3, area4, n12, n13, n14, n23, n24,
n34, n123, n124, n134, n234, n1234,
category = c("Data Phosphosites", "Omnipath Phosphosites",
"KEA2 Phosphosites", "PDTs Phosphosites"),
lty = rep("blank", 4), fill = c("light blue", "red","orange","grey"),
alpha = rep(0.25, 4), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25, cat.pos = c(),
cat.dist = rep(0.075, 4), cat.cex = 1.25)
Venn_plot <- draw.quad.venn(area1, area2, area3, area4, n12, n13, n14, n23, n24,
n34, n123, n124, n134, n234, n1234,
category = c("Data Phosphosites", "Omnipath Phosphosites",
"KEA2 Phosphosites", "PDTs Phosphosites"),
lty = rep("blank", 4), fill = c("light blue", "red","orange","grey"),
alpha = rep(0.25, 4), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 4), cat.cex = 1.25)
## Individual Sources
area1 <- length(PhophositesData)
area2 <- length(PhophositesOmnipath)
area3 <- length(PhosphositesKEA2)
area4 <- length(PhophositesPDTs)
## Pairwise Overlap between Sources
n12 <- length(dplyr::intersect(PhophositesData,PhophositesOmnipath))
n13 <- length(dplyr::intersect(PhophositesData,PhosphositesKEA2))
n14 <- length(dplyr::intersect(PhophositesData,PhophositesPDTs))
n23 <- length(dplyr::intersect(PhophositesOmnipath,PhosphositesKEA2))
n24 <- length(dplyr::intersect(PhophositesOmnipath,PhophositesPDTs))
n34 <- length(dplyr::intersect(PhosphositesKEA2,PhophositesPDTs))
## Triple overlaps
n123 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2))
n124 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhophositesPDTs))
n134 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhosphositesKEA2), PhophositesPDTs))
n234 <- length(dplyr::intersect(dplyr::intersect(PhophositesOmnipath,
PhosphositesKEA2), PhophositesPDTs))
## Total overlap
n1234 <- length(dplyr::intersect(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2),PhophositesPDTs))
Venn_plot <- draw.quad.venn(area1, area2, area3, area4, n12, n13, n14, n23, n24,
n34, n123, n124, n134, n234, n1234,
category = c("Data Phosphosites", "Omnipath Phosphosites",
"KEA2 Phosphosites", "PDTs Phosphosites"),
lty = rep("blank", 4), fill = c("light blue", "red","orange","grey"),
alpha = rep(0.25, 4), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 4), cat.cex = 1.25)
grid.draw(Venn_plot)
grid.draw(Venn_plot)
467 + 77 + 70 + 88
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_merged <- dplyr::bind_rows(Omnipath_df_reduced, KEA2_df) %>%
dplyr::distinct() %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_merged)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct()
# %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
table(ResultsLinearModel$term)
## create sample annotation for using colors with the heatmaps
non_annotated_vars <- c("Intercept", "LNCaP",
"ms_day180409", "ms_day180410", "ms_day180412", "ms_day180414",
"Culture_batch", "fraction_missing")
sample_annotation <- tresult %>% select(term) %>% distinct()
sample_annotation <- sample_annotation %>% filter(!(term %in% non_annotated_vars)) %>%
separate(term, into=c("cell_line", "inhibitor", "time", "ligand"), sep="_", remove=FALSE)
sample_annotation <- sample_annotation %>% mutate_if(is.character, as.factor) %>%
as.data.frame()
rownames(sample_annotation) <- sample_annotation$term
sample_annotation <- sample_annotation %>% select(-term)
sample_annotation
## Specify colors
ann_colors = list(
cell_line = c(abl = "#E69F00", LNCaP = "#56B4E9"),
inhibitor = c(noInhib = "#56B4E9", iPI3K = "#E69F00", iMEK = "#009E73"),
time = c(t0 = "#56B4E9", t1 = "#E69F00", t2 = "#009E73"),
ligand = c(noLigand = "#56B4E9", EGF = "#E69F00", DHT = "#009E73")
)
ann_colors
