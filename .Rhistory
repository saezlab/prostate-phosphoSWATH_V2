df <- data.frame(kinases = kinases, substrates = substrates,
stringsAsFactors = FALSE)
return(df)
}
KEA2_df <- processFile(KEA2_database_path)
PhosphositesKEA2 <- unique(KEA2_df$substrates)
length(PhosphositesKEA2)
## We read the datasets from Hijazi et al 2020. Supplementary Dataset 3
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
PhophositesPDTs <- PDTs_df %>%
dplyr::pull(substrates)  %>%
unique()
length(PhophositesPDTs)
## Individual Sources
area1 <- length(PhophositesData)
area2 <- length(PhophositesOmnipath)
area3 <- length(PhosphositesKEA2)
area4 <- length(PhophositesPDTs)
## Pairwise Overlap between Sources
n12 <- length(dplyr::intersect(PhophositesData,PhophositesOmnipath))
n13 <- length(dplyr::intersect(PhophositesData,PhosphositesKEA2))
n14 <- length(dplyr::intersect(PhophositesData,PhophositesPDTs))
n23 <- length(dplyr::intersect(PhophositesOmnipath,PhosphositesKEA2))
n24 <- length(dplyr::intersect(PhophositesOmnipath,PhophositesPDTs))
n34 <- length(dplyr::intersect(PhosphositesKEA2,PhophositesPDTs))
## Triple overlaps
n123 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2))
n124 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhophositesPDTs))
n134 <- length(dplyr::intersect(dplyr::intersect(PhophositesData,
PhosphositesKEA2), PhophositesPDTs))
n234 <- length(dplyr::intersect(dplyr::intersect(PhophositesOmnipath,
PhosphositesKEA2), PhophositesPDTs))
## Total overlap
n1234 <- length(dplyr::intersect(dplyr::intersect(dplyr::intersect(PhophositesData,
PhophositesOmnipath), PhosphositesKEA2),PhophositesPDTs))
Venn_plot <- draw.quad.venn(area1, area2, area3, area4, n12, n13, n14, n23, n24,
n34, n123, n124, n134, n234, n1234,
category = c("Data Phosphosites", "Omnipath Phosphosites",
"KEA2 Phosphosites", "PDTs Phosphosites"),
lty = rep("blank", 4), fill = c("light blue", "red","orange","grey"),
alpha = rep(0.25, 4), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 4), cat.cex = 1.25)
grid.draw(Venn_plot)
#'\code{df_to_viper_regulon}
#'
#'This function is designed to generate a ready to use regulon object for viper
#'from a 3 column dataframe representation of a target set collection.
#'
#'@param df a dataframe of n*3 dimension. The first column corresponds the targets,
#'and the second column indicates which regulon does each target belongs to.
#'The third column corresponds to the weight and sign of the interaction between
#'a regulon and its targets.
#'
#'@return a list where each element is a regulon in the viper format. This list
#'is ready to be used as a regulon set in viper.
df_to_viper_regulon <- function(df)
{
names(df) <- c("feature","pathway","sign")
df <- df[complete.cases(df),]
pathway_regulon <- list(0)
i <- 1
for(pathway in unique(df$pathway))
{
pathway_feature_list <- list(0)
features <- df[df$pathway == pathway, 3]
names(features) <- df[df$pathway == pathway, 1]
pathway_feature_list[[1]] <- features
pathway_feature_list[[2]] <- rep(1,length(features))
names(pathway_feature_list) <- c("tfmode","likelihood")
pathway_regulon[[i]] <- pathway_feature_list
i <- i+1
}
names(pathway_regulon) <- unique(df$pathway)
return(pathway_regulon)
}
## create sample annotation for using colors with the heatmaps
non_annotated_vars <- c("Intercept", "LNCaP",
"ms_day180409", "ms_day180410", "ms_day180412", "ms_day180414",
"Culture_batch", "fraction_missing")
sample_annotation <- tresult %>% select(term) %>% distinct()
## create sample annotation for using colors with the heatmaps
non_annotated_vars <- c("Intercept", "LNCaP", "ms_day180409", "ms_day180410",
"ms_day180412", "ms_day180414", "Culture_batch", "fraction_missing")
sample_annotation <- ResultsLinearModel %>%
select(term) %>%
distinct()
sample_annotation <- sample_annotation %>%
filter(!(term %in% non_annotated_vars)) %>%
separate(term, into=c("cell_line", "inhibitor", "time", "ligand"),
sep="_", remove=FALSE)
sample_annotation <- sample_annotation %>%
mutate_if(is.character, as.factor) %>%
as.data.frame()
rownames(sample_annotation) <- sample_annotation$term
sample_annotation <- sample_annotation %>% select(-term)
sample_annotation
## Specify colors
ann_colors = list(
cell_line = c(abl = "#E69F00", LNCaP = "#56B4E9"),
inhibitor = c(noInhib = "#56B4E9", iPI3K = "#E69F00", iMEK = "#009E73"),
time = c(t0 = "#56B4E9", t1 = "#E69F00", t2 = "#009E73"),
ligand = c(noLigand = "#56B4E9", EGF = "#E69F00", DHT = "#009E73")
)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::mutate(statistic = mean(statistic)) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
head(MatrixStatistic)
View(LinearModelData_df)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic = max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
di(MatrixStatistic)
dim(MatrixStatistic)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct()
# %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct()
# %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
KSN_Omnipath
Omnipath_df
head(Omnipath_df)
View(Omnipath_df)
head(import_Omnipath_PTMS() )
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
Kin_activity <- t(viper(MatrixStatistic, regulon = KSN_viper,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
Kin_activity <- t(viper(MatrixStatistic, regulon = KSN_Omnipath_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
Kin_activity
sample_annotation
ann_colors
pheatmap(Kin_activity, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors)
ann_colors
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors)
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 0,  border_color = NA)
paletteLength = 100
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 1,  border_color = NA)
?pheatmap
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
covariate_vars <- c("Intercept","ms_day180409", "ms_day180410", "ms_day180412",
"ms_day180414", "Culture_batch", "fraction_missing")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
dplyr::filter(!(term %in% covariate_vars))
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
dim(MatrixStatistic)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
Kin_activity_Omnipath <- viper(MatrixStatistic, regulon = KSN_Omnipath_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
?viper
KEA2_df
head(KEA2_df)
KEA2_df
dim(KEA2_df)
grid.draw(Venn_plot)
KSN_KEA2 <- KEA2_df %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_KEA2)
KSN_KEA2
KSN_KEA2_regulon <- df_to_viper_regulon(KSN_KEA2[,c(2,1,3)])
Kin_activity_Omnipath <- viper(MatrixStatistic, regulon = KSN_KEA2_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
Kin_activity_KEA2 <- viper(MatrixStatistic, regulon = KSN_KEA2_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
pheatmap(Kin_activity_KEA2, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
PDTs_df
KSN_PDTs <- PDTs_df
nrow(KSN_PDTs)
KSN_PDTs_regulon <- df_to_viper_regulon(KSN_PDTs[,c(2,1,3)])
Kin_activity_PDTs <- viper(MatrixStatistic, regulon = KSN_PDTs_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
KSN_PDTs_regulon
KSN_PDTs
KSN_PDTs
KSN_PDTs <- as.data.frame(PDTs_df)
nrow(KSN_PDTs)
KSN_PDTs
KSN_PDTs_regulon <- df_to_viper_regulon(KSN_PDTs[,c(2,1,3)])
Kin_activity_PDTs <- viper(MatrixStatistic, regulon = KSN_PDTs_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
Kin_activity_PDTs
pheatmap(Kin_activity_PDTs, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
KSN_merged_Allsources <- dplyr::bind_rows(KSN_Omnipath, KSN_KEA2, KSN_PDTs) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
KSN_merged_Allsources <- dplyr::bind_rows(KSN_Omnipath, KSN_KEA2, KSN_PDTs) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
KSN_Allsources_regulon <- df_to_viper_regulon(KSN_merged_Allsources[,c(2,1,3)])
Kin_activity_Allsources <- (viper(MatrixStatistic, regulon = KSN_Allsources_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
pheatmap(Kin_activity_Allsources, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
?pheatmap
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf")
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 8.3, height = 11.7, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 8.3, height = 11.7, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 11.7, height = 8.3, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, width = 11.7, height = 8.3)
? viper
alberto <- import_Omnipath_complexes()
?import_Omnipath_complexes
alberto
query_genes <- c("ABL1","ABL2","LIMK1", "LIMK2", "MINK1")
complexes <- import_Omnipath_complexes()
complexes_query_genes_any <- get_complex_genes(complexes,query_genes, total_match=FALSE)
complexes_query_genes_any
library(progeny)
full_model <- getFullModel(organism=organism)
full_model <- getFullModel()
?getFullModel
full_model <- getFullModel("Human")
head(full_model)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR")
head(full_model)
dim(full_model)
?arrange
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::arrange(desc(-p.value))
head(full_model)
c("MINK1","ABL1","ABL2","LIMK1","LIMK2")
ourgenes <- c("MINK1","ABL1","ABL2","LIMK1","LIMK2")
library(progeny)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::arrange(desc(-p.value)) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(100, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
library(progeny)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(200, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(500, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(1000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(10000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(5000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
library(gprofiler2)
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))
EnrichmentResults
?gost
colnames(EnrichmentResults)
EnrichmentResults
EnrichmentResults$result
colnames(EnrichmentResults$result)
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")) %>%
dplyr::filter(intersection_size >= 4)
class(intersection_size)
class(EnrichmentResults)
EnrichmentResults <- unlist(gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")))[1] %>%
dplyr::filter(intersection_size >= 4)
unlist(gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")))[1]
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 4)
EnrichmentResults
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 4) %>%
dplyr::arrange(desc(p_value))%>%
dplyr::select(term_id, source, term_name, p_value)
EnrichmentResults
vignette("CARNIVAL-vignette")
?runCARNIVAL
library(CARNIVAL)
CARNIVAL
?CARNIVAL
?runCARNIVAL
library(OmnipathR)
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(is_stimulation != 0 | is_inhibition != 0)
head(OmnipathInteractions)
dim(OmnipathInteractions)
library(dplyr)
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(is_stimulation != 0 | is_inhibition != 0)  %>%
dplyr::mutate(sign = if_else(is_stimulation==1,1,-1)
source_genesymbol, target_genesymbol)
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(is_stimulation != 0 | is_inhibition != 0)  %>%
dplyr::mutate(sign = if_else(is_stimulation==1,1,-1))
head(OmnipathInteractions)
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(is_stimulation != 0 | is_inhibition != 0)  %>%
dplyr::mutate(sign = if_else(is_stimulation==1,1,-1)) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
head(OmnipathInteractions)
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
library(readr)
KSN_PDTs <- as.data.frame(PDTs_df)
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/prostate-phosphoSWATH_V2/")
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
KSN_PDTs <- as.data.frame(PDTs_df)
head(KSN_PDTs)
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", substrates="target"))
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", substrates="target")
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", target="substrates")
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", target="substrates") %>%
dplyr::select(source, sign, target)
KSN_PDTs
head/(KSN_PDTs)
head(KSN_PDTs)
CarnivalNetwork <- unique(as.data.frame(rbind(PDTs_df,KSN_PDTs)))
CarnivalNetwork <- unique(as.data.frame(rbind(OmnipathInteractions,KSN_PDTs)))
head(CarnivalNetwork)
