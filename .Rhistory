dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
head(LinearModelData_df)
covariate_vars <- c("Intercept","ms_day180409", "ms_day180410", "ms_day180412",
"ms_day180414", "Culture_batch", "fraction_missing", "LNCaP")
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
MatrixStatistic
dim(MatrixStatistic)
?cor
alberto <- cor(MatrixStatistic, use = "pairwise.complete.obs",
method = c("pearson", "kendall", "spearman"))
alberto
alberto <- cor(MatrixStatistic, use = "everything",
method = c("pearson", "kendall", "spearman"))
alberto
head(MatrixStatistic)
alberto <- cor(t(MatrixStatistic), use = "pairwise.complete.obs",
method = c("pearson", "kendall", "spearman"))
alberto
head(alberto)
dim(alberto)
alberto[1:10,1:10]
?apply
apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
corMatrix <-
cor(t(MatrixStatistic), use = "pairwise.complete.obs",method = c("pearson"))
apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
corGraph <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
corGraph[1:10,1:10]
sumCols(corGraph)
colSums(corGraph)
corGraph <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
corGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
head(corGraph_AdjMatrix)
corGraph_AdjMatrix[1:10,1:10]
AnticorGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x <= -0.5,1,0)})
colSums(AnticorGraph_AdjMatrix)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
head(MatrixStatistic)
?top_n
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variablity = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variablity) %>%
dplyr::ungroup() %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
dim(MatrixStatistic)
MatrixStatistic
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variablity = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variablity) %>%
dplyr::ungroup()
MatrixStatistic
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variablity = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variablity)
MatrixStatistic
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variablity = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variablity) %>%
dplyr::ungroup()
MatrixStatistic
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variablity = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variablity) %>%
dplyr::ungroup() %>%
dplyr::select(-variablity) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
corMatrix <-
cor(t(MatrixStatistic), use = "pairwise.complete.obs",method = c("pearson"))
dim(corMatrix)
head(corMatrix)
corMatrix[1:10,1:10]
?enframe
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))
dim(MatrixStatistic)
head(MatrixStatistic)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::mutate(variance = var(statistic))
head(MatrixStatistic)
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))
MatrixStatistic
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic)) %>%
dplyr::top_n(n = 500, wt = variance)
dim(MatrixStatistic)
head(MatrixStatistic)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic)) %>%
dplyr::ungroup() %>%
dplyr::top_n(n = 500, wt = variance)
head(MatrixStatistic)
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic)) %>%
dplyr::ungroup() %>%
dplyr::top_n(n = 500, wt = variance)
head(MatrixStatistic)
MatrixStatistic
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
head(MatrixStatistic)
MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic)) %>%
# dplyr::ungroup() %>%
dplyr::top_n(n = 500, wt = variance) %>%
dplyr::ungroup()
?top_n
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))
?arrange
## Most variable genes
MostVariableGene <- MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance))
## Most variable genes
MostVariableSites <- MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance))
MostVariableSites
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::filter(GeneSymbol_Residue != "NA_TNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
## Most variable genes
MostVariableSites <- MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance))
MostVariableSites
?distinct
## Most variable genes
MostVariableSites <- MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE)
MostVariableSites
## Most variable genes (Phosposites)
MostVariableSites <- MatrixStatistic %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(n = 500) %>%
dplyr::pull(GeneSymbol_Residue)
head(MostVariableSites)
## Most variable genes (Phosposites)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(n = 500) %>%
dplyr::pull(GeneSymbol_Residue)
MostVariableSites
length(MostVariableSites)
MostVariableSites
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(n = 500)
## From linear model to Matrix suitable to run Viper.
LinearModelData_df_Clean <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::filter(GeneSymbol_Residue != "NA_TNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(n = 500)
MostVariableSites
?top_n
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(n = 500)
MostVariableSites
## Most variable genes (Phosposites)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(500) %>%
dplyr::pull(GeneSymbol_Residue)
MostVariableSites
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::top_n(500)
MostVariableSites
## Most variable genes (Phosposites)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::top_n(500) %>%
dplyr::pull(GeneSymbol_Residue)
MostVariableSites
?anti_join
## Most variable genes (Phosposites)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::top_n(500) %>%
dplyr::select(GeneSymbol_Residue)
MostVariableSites
MatrixStatistic <-
dplyr::anti_join(LinearModelData_df_Clean,MostVariableSites)
dim(MatrixStatistic)
MatrixStatistic <-
dplyr::anti_join(LinearModelData_df_Clean,MostVariableSites) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
dim(MatrixStatistic)
MatrixStatistic[1:10,1:0]
MatrixStatistic[1:10,1:10]
MatrixStatistic <-
dplyr::left_join(LinearModelData_df_Clean,MostVariableSites) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
dim(MatrixStatistic)
?semi_join
MatrixStatistic <-
dplyr::semi_join(LinearModelData_df_Clean,MostVariableSites) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
MatrixStatistic
dim(MatrixStatistic)
corMatrix <-
cor(t(MatrixStatistic), use = "pairwise.complete.obs",method = c("pearson"))
corGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
AnticorGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x <= -0.5,1,0)})
head(MatrixStatistic)
head(corGraph_AdjMatrix)
colSums(corGraph_AdjMatrix)
colSums(AnticorGraph_AdjMatrix)
corGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
AnticorGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x <= -0.5,1,0)})
## Reading String intractions V11
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(biomaRt)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
biogridInteractions <-
read.csv("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/BIOGRID-ALL-3.5.180.mitab.txt",
sep = "\t", stringsAsFactors = FALSE) %>%
dplyr::filter(Taxid.Interactor.A  == "taxid:9606", Taxid.Interactor.B == "taxid:9606")
GeneA <- gsub('\\|entrez gene', replacement = "",
unlist(lapply(strsplit(biogridInteractions$Alt.IDs.Interactor.A, split = "/locuslink:"), function(x) unlist(x)[2])))
GeneB <- gsub('\\|entrez gene', replacement = "",
unlist(lapply(strsplit(biogridInteractions$Alt.IDs.Interactor.B, split = "/locuslink:"), function(x) unlist(x)[2])))
biogridInteractionsClean <-
dplyr::mutate(biogridInteractions, GeneA = GeneA, GeneB = GeneB) %>%
dplyr::select(c(GeneA, GeneB, Interaction.Detection.Method, Interaction.Types, Source.Database,
Confidence.Values)) %>%
dplyr::distinct(GeneA, GeneB, .keep_all = TRUE)
########
LinkPredictions <- read.csv("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/LeoScripts/alberto.csv",
sep= ",", header = FALSE, stringsAsFactors = FALSE)
### Make this step better. We remove duplicates
LinkPredictions <- LinkPredictions %>%
dplyr::filter(V1!=V2) %>%
dplyr::distinct(V3, .keep_all = TRUE) %>%
dplyr::rename(GeneAid = "V1", GeneBid = "V2", Score = "V3")
# We have to remove links that are already present
MolecularNetwork <-
read.csv("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/LeoScripts/Networks_Multiplex/molecular_multiplex_without_CoExp.edges",
sep = " ", header = FALSE, stringsAsFactors = FALSE)  %>%
dplyr::rename(Layer = "V1", GeneAid = "V2", GeneBid = "V3", Weight = "V4")
MolecularNetwork_unique <-
dplyr::distinct(MolecularNetwork,GeneAid,GeneBid, .keep_all = TRUE)
LinkPredictions_NoMolecular <- dplyr::bind_rows(
dplyr::anti_join(LinkPredictions,MolecularNetwork,
by = c("GeneAid" = "GeneAid", "GeneBid" = "GeneBid")),
dplyr::anti_join(LinkPredictions, MolecularNetwork,
by = c("GeneAid" = "GeneBid", "GeneBid" = "GeneAid"))
) %>%
dplyr::distinct()
## We now have to map the values to GeneNames
MappingGenes <- read.csv("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/LeoScripts/Networks_Multiplex/mapping_genes_int",
sep = " ", header = FALSE, stringsAsFactors = FALSE)
MolecularNetwork_geneSymbol <-
dplyr::inner_join(MolecularNetwork, MappingGenes, by=c("GeneAid" = "V2")) %>%
dplyr::inner_join(MappingGenes, by=c("GeneBid" = "V2"))  %>%
dplyr::select(V1.x, V1.y, Layer) %>%
dplyr::rename(GeneA = "V1.x", GeneB = "V1.y") %>%
dplyr::mutate(Layer = ifelse(Layer==1, "PPI", ifelse(Layer == 2,
"Pathways", "Complexes")))
## Matching with Biogrid:
Matching_Molecular_Biogrid <- dplyr::bind_rows(
dplyr::semi_join(MolecularNetwork_geneSymbol,biogridInteractionsClean,
by=c("GeneA" = "GeneA", "GeneB" = "GeneB")),
dplyr::semi_join(MolecularNetwork_geneSymbol,biogridInteractionsClean,
by=c("GeneA" = "GeneB", "GeneB" = "GeneA"))) %>%
dplyr::distinct()
ggplot(Matching_Molecular_Biogrid, aes(x=Layer)) +
geom_histogram(stat="count", colour="black", fill="orange") +
theme_minimal()  +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x=element_text(angle = 60, hjust = 1, size = 12, face="bold"),
axis.text.y=element_text(size = 12, face="bold")) +
ylab("Number Interactions")
LinkPredictions_NoMolecularMap <-
dplyr::inner_join(LinkPredictions_NoMolecular, MappingGenes, by=c("GeneAid" = "V2")) %>%
dplyr::inner_join(MappingGenes, by=c("GeneBid" = "V2")) %>%
dplyr::rename(GeneA = "V1.x" , GeneB = "V1.y") %>%
dplyr::select(c(GeneA, GeneB, Score)) %>%
dplyr::mutate(GeneA = as.character(GeneA)) %>%
dplyr::mutate(GeneB = as.character(GeneB))
Matching_Biogrid  <- bind_rows(
dplyr::semi_join(LinkPredictions_NoMolecularMap, biogridInteractionsClean,
by = c("GeneA" = "GeneA", "GeneB"= "GeneB")),
dplyr::semi_join(LinkPredictions_NoMolecularMap, biogridInteractionsClean,
by = c("GeneA"= "GeneB", "GeneB"= "GeneA")))  %>%
dplyr::distinct()
RWR_SimilarityMatrix <- readRDS("/home/alvaldeolivas/Desktop/Trabajo/Marseille/DeepWalkMultiplex/LeoScripts/Sim_MatrixMolecularNoCoex.rds")
dim(RWR_SimilarityMatrix)
Cosine_RWR_SimilarityMatrix <- cosine(RWR_SimilarityMatrix)
?cosine
