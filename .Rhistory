dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
di(MatrixStatistic)
dim(MatrixStatistic)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct()
# %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct()
# %>%
#  dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
KSN_Omnipath
Omnipath_df
head(Omnipath_df)
View(Omnipath_df)
head(import_Omnipath_PTMS() )
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
Kin_activity <- t(viper(MatrixStatistic, regulon = KSN_viper,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
Kin_activity <- t(viper(MatrixStatistic, regulon = KSN_Omnipath_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
Kin_activity
sample_annotation
ann_colors
pheatmap(Kin_activity, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors)
ann_colors
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors)
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 0,  border_color = NA)
paletteLength = 100
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 1,  border_color = NA)
?pheatmap
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=14,  fontsize_row = 10,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(t(Kin_activity), cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
covariate_vars <- c("Intercept","ms_day180409", "ms_day180410", "ms_day180412",
"ms_day180414", "Culture_batch", "fraction_missing")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
dplyr::filter(!(term %in% covariate_vars))
## From linear model to Matrix suitable to run Viper.
MatrixStatistic <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(statistic == max(abs(statistic))) %>%
dplyr::ungroup() %>%
dplyr::distinct()  %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
dim(MatrixStatistic)
Omnipath_df_reduced <- Omnipath_df %>%
dplyr::select(enzyme_genesymbol,GeneResidue) %>%
dplyr::rename(kinases = "enzyme_genesymbol", substrates = "GeneResidue")
KSN_Omnipath <- Omnipath_df_reduced %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_Omnipath)
KSN_Omnipath_regulon <- df_to_viper_regulon(KSN_Omnipath[,c(2,1,3)])
Kin_activity_Omnipath <- viper(MatrixStatistic, regulon = KSN_Omnipath_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
?viper
KEA2_df
head(KEA2_df)
KEA2_df
dim(KEA2_df)
grid.draw(Venn_plot)
KSN_KEA2 <- KEA2_df %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_KEA2)
KSN_KEA2
KSN_KEA2_regulon <- df_to_viper_regulon(KSN_KEA2[,c(2,1,3)])
Kin_activity_Omnipath <- viper(MatrixStatistic, regulon = KSN_KEA2_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
Kin_activity_KEA2 <- viper(MatrixStatistic, regulon = KSN_KEA2_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
pheatmap(Kin_activity_KEA2, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
PDTs_df
KSN_PDTs <- PDTs_df
nrow(KSN_PDTs)
KSN_PDTs_regulon <- df_to_viper_regulon(KSN_PDTs[,c(2,1,3)])
Kin_activity_PDTs <- viper(MatrixStatistic, regulon = KSN_PDTs_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
KSN_PDTs_regulon
KSN_PDTs
KSN_PDTs
KSN_PDTs <- as.data.frame(PDTs_df)
nrow(KSN_PDTs)
KSN_PDTs
KSN_PDTs_regulon <- df_to_viper_regulon(KSN_PDTs[,c(2,1,3)])
Kin_activity_PDTs <- viper(MatrixStatistic, regulon = KSN_PDTs_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE)
Kin_activity_PDTs
pheatmap(Kin_activity_PDTs, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
KSN_merged_Allsources <- dplyr::bind_rows(KSN_Omnipath, KSN_KEA2, KSN_PDTs) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
KSN_merged_Allsources <- dplyr::bind_rows(KSN_Omnipath, KSN_KEA2, KSN_PDTs) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
KSN_Allsources_regulon <- df_to_viper_regulon(KSN_merged_Allsources[,c(2,1,3)])
Kin_activity_Allsources <- (viper(MatrixStatistic, regulon = KSN_Allsources_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE))
pheatmap(Kin_activity_Allsources, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
?pheatmap
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf")
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 8.3, height = 11.7, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 8.3, height = 11.7, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 11.7, height = 8.3, silent=FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, width = 11.7, height = 8.3)
? viper
alberto <- import_Omnipath_complexes()
?import_Omnipath_complexes
alberto
query_genes <- c("ABL1","ABL2","LIMK1", "LIMK2", "MINK1")
complexes <- import_Omnipath_complexes()
complexes_query_genes_any <- get_complex_genes(complexes,query_genes, total_match=FALSE)
complexes_query_genes_any
library(progeny)
full_model <- getFullModel(organism=organism)
full_model <- getFullModel()
?getFullModel
full_model <- getFullModel("Human")
head(full_model)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR")
head(full_model)
dim(full_model)
?arrange
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::arrange(desc(-p.value))
head(full_model)
c("MINK1","ABL1","ABL2","LIMK1","LIMK2")
ourgenes <- c("MINK1","ABL1","ABL2","LIMK1","LIMK2")
library(progeny)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::arrange(desc(-p.value)) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(100, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
library(progeny)
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(200, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(500, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(1000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(10000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
full_model <- getFullModel("Human") %>%
dplyr::filter(pathway == "EGFR") %>%
dplyr::top_n(5000, wt = -p.value) %>%
dplyr::filter(gene %in% ourgenes)
full_model
library(gprofiler2)
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))
EnrichmentResults
?gost
colnames(EnrichmentResults)
EnrichmentResults
EnrichmentResults$result
colnames(EnrichmentResults$result)
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")) %>%
dplyr::filter(intersection_size >= 4)
class(intersection_size)
class(EnrichmentResults)
EnrichmentResults <- unlist(gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")))[1] %>%
dplyr::filter(intersection_size >= 4)
unlist(gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr")))[1]
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 4)
EnrichmentResults
EnrichmentResults <- gost(ourgenes, significant = TRUE,
user_threshold = 0.001, correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 4) %>%
dplyr::arrange(desc(p_value))%>%
dplyr::select(term_id, source, term_name, p_value)
EnrichmentResults
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(CARNIVAL)
library(OmnipathR)
library(dplyr)
library(readr)
library(caret)
range <- function(x){ (x - min(x))/(max(x)-min(x)) * (1 - (-1)) + -1 }
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/prostate-phosphoSWATH_V2/")
#### Generate the Network
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(consensus_stimulation != 0 | consensus_stimulation != 0)  %>%
dplyr::mutate(sign = if_else(consensus_stimulation==1,1,-1)) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", target="substrates") %>%
dplyr::select(source, sign, target)
CarnivalNetwork <- dplyr::bind_rows(OmnipathInteractions, KSN_PDTs) %>%
dplyr::distinct()
CarnivalNetwork$target <- gsub("[/]","_",CarnivalNetwork$target)
CarnivalNetwork$target <- gsub("[space]","_",CarnivalNetwork$target)
CarnivalNetwork$source <- gsub("[-]", "_", CarnivalNetwork$source)
CarnivalNetwork$target <- gsub("[-]", "_", CarnivalNetwork$target)
# CarnivalNetwork$source <- gsub("[-+{},;() ]","___",CarnivalNetwork$source)
# CarnivalNetwork$target <- gsub("[-+{},;() ]","___",CarnivalNetwork$target)
###### Linear model to take the t-values and use them as the dowstream targets
## for CARNIVAL, the measurements objects
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_LNCaP_noInhib_t2_EGF <- LinearModelData_df %>%
dplyr::filter(term == "LNCaP_noInhib_t2_EGF") %>%
dplyr::filter(p.value < 0.1)  %>%
dplyr::select(GeneSymbol_Residue, statistic)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::filter(statistic == max(abs(statistic)))  %>%
dplyr::ungroup() %>%
dplyr::filter(GeneSymbol_Residue %in% CarnivalNetwork$target) %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.data.frame()
# rownames(LinearModelData_LNCaP_noInhib_t2_EGF) <-
#    gsub("[-+{},;() ]","___",rownames(LinearModelData_LNCaP_noInhib_t2_EGF))
###### NES Scores. I am going to use these scores as Progeny scores to drive the network
Kin_activity_PDTs <- as.data.frame(readRDS("Results/Kin_activity_PDTs.rds"))
Kin_activity_LNCaP_noInhib_t2_EGF <- Kin_activity_PDTs  %>%
dplyr::select(LNCaP_noInhib_t2_EGF)
## We have to scale the NES between 1 and 0.
Kin_activity_LNCaP_noInhib_t2_EGF$LNCaP_noInhib_t2_EGF <-
range(Kin_activity_LNCaP_noInhib_t2_EGF$LNCaP_noInhib_t2_EGF)
# rownames(Kin_activity_LNCaP_noInhib_t2_EGF) <-
#     gsub("[-+{},;() ]","___",rownames(Kin_activity_LNCaP_noInhib_t2_EGF))
##### And I have a perturbation EGF
inputObj <- data.frame(EGF = 1)
##  We run CARNIVAL for our particular condition
# counter_CL <- detectCores() - 2
CarnivalResults <-runCARNIVAL(
solverPath="/opt/ibm/ILOG/CPLEX_Studio129/cplex/bin/x86-64_linux/cplex",
netObj=CarnivalNetwork,
measObj=t(LinearModelData_LNCaP_noInhib_t2_EGF),
inputObj = inputObj,
dir_name="Results",
weightObj=t(Kin_activity_LNCaP_noInhib_t2_EGF),
nodeID = 'gene',
timelimit = 7200,
solver = "cplex")
# progenyMembers = progenyMembers_mice,
# parallelIdx1 = counter_CL)
saveRDS(CarnivalResults, file = "Results/CarnivalResults.rds")
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(CARNIVAL)
library(OmnipathR)
library(dplyr)
library(readr)
library(caret)
range <- function(x){ (x - min(x))/(max(x)-min(x)) * (1 - (-1)) + -1 }
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/prostate-phosphoSWATH_V2/")
#### Generate the Network
OmnipathInteractions <- import_Omnipath_Interactions() %>%
dplyr::filter(consensus_stimulation != 0 | consensus_stimulation != 0)  %>%
dplyr::mutate(sign = if_else(consensus_stimulation==1,1,-1)) %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
PDTs_df <-
read_tsv("Data/41587_2019_391_MOESM5_ESM.csv",col_names = FALSE,  skip = 1) %>%
dplyr::rename(kinases = "X1", substrates = "X2", kinaseFamily = "X3", sign = "X4") %>%
dplyr::mutate(substrates = gsub("\\(", "_", substrates)) %>%
dplyr::mutate(substrates = gsub("\\)", "",substrates)) %>%
dplyr::select(-kinaseFamily) %>%
dplyr::distinct()
KSN_PDTs <- as.data.frame(PDTs_df) %>%
dplyr::rename(source="kinases", target="substrates") %>%
dplyr::select(source, sign, target)
CarnivalNetwork <- dplyr::bind_rows(OmnipathInteractions, KSN_PDTs) %>%
dplyr::distinct()
CarnivalNetwork$target <- gsub("[/]","_",CarnivalNetwork$target)
CarnivalNetwork$target <- gsub("[space]","_",CarnivalNetwork$target)
CarnivalNetwork$source <- gsub("[-]", "_", CarnivalNetwork$source)
CarnivalNetwork$target <- gsub("[-]", "_", CarnivalNetwork$target)
# CarnivalNetwork$source <- gsub("[-+{},;() ]","___",CarnivalNetwork$source)
# CarnivalNetwork$target <- gsub("[-+{},;() ]","___",CarnivalNetwork$target)
###### Linear model to take the t-values and use them as the dowstream targets
## for CARNIVAL, the measurements objects
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
LinearModelData_LNCaP_noInhib_t2_EGF <- LinearModelData_df %>%
dplyr::filter(term == "LNCaP_noInhib_t2_EGF") %>%
dplyr::filter(p.value < 0.1)  %>%
dplyr::select(GeneSymbol_Residue, statistic)  %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::filter(statistic == max(abs(statistic)))  %>%
dplyr::ungroup() %>%
dplyr::filter(GeneSymbol_Residue %in% CarnivalNetwork$target) %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.data.frame()
# rownames(LinearModelData_LNCaP_noInhib_t2_EGF) <-
#    gsub("[-+{},;() ]","___",rownames(LinearModelData_LNCaP_noInhib_t2_EGF))
###### NES Scores. I am going to use these scores as Progeny scores to drive the network
Kin_activity_PDTs <- as.data.frame(readRDS("Results/Kin_activity_PDTs.rds"))
Kin_activity_LNCaP_noInhib_t2_EGF <- Kin_activity_PDTs  %>%
dplyr::select(LNCaP_noInhib_t2_EGF)
## We have to scale the NES between 1 and 0.
Kin_activity_LNCaP_noInhib_t2_EGF$LNCaP_noInhib_t2_EGF <-
range(Kin_activity_LNCaP_noInhib_t2_EGF$LNCaP_noInhib_t2_EGF)
# rownames(Kin_activity_LNCaP_noInhib_t2_EGF) <-
#     gsub("[-+{},;() ]","___",rownames(Kin_activity_LNCaP_noInhib_t2_EGF))
##### And I have a perturbation EGF
inputObj <- data.frame(EGF = 1)
##  We run CARNIVAL for our particular condition
# counter_CL <- detectCores() - 2
CarnivalResults <-runCARNIVAL(
solverPath="/opt/ibm/ILOG/CPLEX_Studio129/cplex/bin/x86-64_linux/cplex",
netObj=CarnivalNetwork,
measObj=t(LinearModelData_LNCaP_noInhib_t2_EGF),
inputObj = inputObj,
dir_name="Results",
weightObj=t(Kin_activity_LNCaP_noInhib_t2_EGF),
# nodeID = 'gene',
timelimit = 7200,
solver = "cplex")
# progenyMembers = progenyMembers_mice,
# parallelIdx1 = counter_CL)
saveRDS(CarnivalResults, file = "Results/CarnivalResults.rds")
t(Kin_activity_LNCaP_noInhib_t2_EGF)
t(Kin_activity_LNCaP_noInhib_t2_EGF)
inputObj
CarnivalResults <-runCARNIVAL(
solverPath="/opt/ibm/ILOG/CPLEX_Studio129/cplex/bin/x86-64_linux/cplex",
netObj=CarnivalNetwork,
measObj=t(LinearModelData_LNCaP_noInhib_t2_EGF),
inputObj = inputObj,
dir_name="Results",
weightObj=Kin_activity_LNCaP_noInhib_t2_EGF,
# nodeID = 'gene',
timelimit = 7200,
solver = "cplex")
Kin_activity_LNCaP_noInhib_t2_EGF
vignette("CARNIVAL-vignette")
inputObj
Kin_activity_LNCaP_noInhib_t2_EGF
Kin_activity_LNCaP_noInhib_t2_EGF %in% CarnivalNetwork$source
rownames(Kin_activity_LNCaP_noInhib_t2_EGF) %in% CarnivalNetwork$source
CarnivalResults <-runCARNIVAL(
solverPath="/opt/ibm/ILOG/CPLEX_Studio129/cplex/bin/x86-64_linux/cplex",
netObj=CarnivalNetwork,
measObj=t(LinearModelData_LNCaP_noInhib_t2_EGF),
# inputObj = inputObj,
dir_name="Results",
weightObj=t(Kin_activity_LNCaP_noInhib_t2_EGF),
# nodeID = 'gene',
timelimit = 7200,
solver = "cplex")
Kin_activity_LNCaP_noInhib_t2_EGF
LinearModelData_LNCaP_noInhib_t2_EGF
Kin_activity_LNCaP_noInhib_t2_EGF
Kin_activity_LNCaP_noInhib_t2_EGF %in% CarnivalNetwork$source
colnames(Kin_activity_LNCaP_noInhib_t2_EGF) %in% CarnivalNetwork$source
rownames(Kin_activity_LNCaP_noInhib_t2_EGF) %in% CarnivalNetwork$source
?runCARNIVAL
LinearModelData_LNCaP_noInhib_t2_EGF
Kin_activity_LNCaP_noInhib_t2_EGF
7200*2
CarnivalResults <-runCARNIVAL(
solverPath="/opt/ibm/ILOG/CPLEX_Studio129/cplex/bin/x86-64_linux/cplex",
netObj=CarnivalNetwork,
measObj=t(LinearModelData_LNCaP_noInhib_t2_EGF),
inputObj = NULL,
dir_name="Results",
weightObj=t(Kin_activity_LNCaP_noInhib_t2_EGF),
# nodeID = 'gene',
timelimit = 20000,
solver = "cplex")
Kin_activity_LNCaP_noInhib_t2_EGF
