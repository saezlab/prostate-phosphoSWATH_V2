minsize = 5, adaptive.size = TRUE, eset.filter = TRUE, verbose = FALSE)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_Omnipath, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Omnipath.pdf",
width = 11.7, height = 8.3)
KSN_KEA2 <- KEA2_df %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_KEA2)
KSN_KEA2_regulon <- df_to_viper_regulon(KSN_KEA2[,c(2,1,3)])
Kin_activity_KEA2 <- viper(MatrixStatistic, regulon = KSN_KEA2_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE, verbose = FALSE)
pheatmap(Kin_activity_KEA2, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_KEA2, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_KEA2.pdf",
width = 11.7, height = 8.3)
KSN_PDTs <- as.data.frame(PDTs_df)
nrow(KSN_PDTs)
KSN_PDTs_regulon <- df_to_viper_regulon(KSN_PDTs[,c(2,1,3)])
Kin_activity_PDTs <- viper(MatrixStatistic, regulon = KSN_PDTs_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE, verbose = FALSE)
saveRDS(Kin_activity_PDTs, file = "Results/Kin_activity_PDTs.rds")
pheatmap(Kin_activity_PDTs, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_PDTs, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_PDTs.pdf",
width = 11.7, height = 8.3)
KSN_merged_Allsources <- dplyr::bind_rows(KSN_Omnipath, KSN_KEA2, KSN_PDTs) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = 1)
nrow(KSN_merged_Allsources)
KSN_Allsources_regulon <- df_to_viper_regulon(KSN_merged_Allsources[,c(2,1,3)])
Kin_activity_Allsources <- viper(MatrixStatistic, regulon = KSN_Allsources_regulon,
minsize = 5, adaptive.size = TRUE, eset.filter = TRUE, verbose = FALSE)
pheatmap(Kin_activity_Allsources, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5)
pheatmap(Kin_activity_Allsources, cluster_rows=TRUE, cluster_cols=TRUE,
annotation_col=sample_annotation, annotation_colors = ann_colors,
fontsize=8,  fontsize_row = 8,  treeheight_col = 1.5,  border_color = NA,
treeheight_row = 1.5, filename="FiguresKAE/Kin_activity_Allsources.pdf",
width = 11.7, height = 8.3)
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens',custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 2) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', # custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 3) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 3) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 3) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(KSN_PDTs$kinases)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 2) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
Omnipath_df
head(Omnipath_df)
Omnipath_df$enzyme_genesymbol
GeneSet %in% unique(Omnipath_df$enzyme_genesymbol)
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(Omnipath_df$enzyme_genesymbol)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 2) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.05,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 3) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
## To fair a very restringent enrichment, we just consider kinases in the KSN
GeneSet <-  c("ABL1","ABL2","LIMK1","LIMK2")
KinaseBackground <- unique(Omnipath_df$enzyme_genesymbol)
EnrichmentResults <- gost(GeneSet, significant = TRUE, user_threshold = 0.025,
organism = 'hsapiens', custom_bg=KinaseBackground,
correction_method = c("fdr"))[[1]] %>%
dplyr::filter(intersection_size >= 3) %>%
dplyr::select(term_id, source, term_name, p_value) %>%
dplyr::arrange(p_value)
EnrichmentResults
CarnivalResults <-
readRDS("/home/alvaldeolivas/Documents/GitHub/Saezlab/prostate-phosphoSWATH_V2/Results/CarnivalResults.rds")
sif_carni <- as.data.frame(CarnivalResults$weightedSIF,
stringsAsFactors = FALSE)
sif_carni
sif_carni[sif_carni$Node1 == "PRKCA",]
knitr::opts_chunk$set(echo = TRUE)
## We use biomaRt to transform from ensembl Ids to Gene symbols
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
library(biomaRt)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
## We use biomaRt to transform from ensembl Ids to Gene symbols
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
_?listMarts
?listMarts
## We use biomaRt to transform from ensembl Ids to Gene symbols
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl_mart_99"))
listDatasets()
?listDatasets
listDatasets(mart = "ensembl")
## We use biomaRt to transform from ensembl Ids to Gene symbols
ensembl <- useEnsembl(biomart = "ensembl")
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
?runGSAhyper
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(piano)
?runGSAhyper
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(piano)
library(dplyr)
library(omicToolsTest)
library(ggplot2)
CarnivalResults <- readRDS("Results/CarnivalResults.rds")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(piano)
library(dplyr)
library(omicToolsTest)
library(ggplot2)
CarnivalResults <- readRDS("Results/CarnivalResults.rds")
CarnivalNetwork <- as.data.frame(CarnivalResults$weightedSIF, stringsAsFactors = FALSE)
colnames(CarnivalNetwork) <- c("source", "sign", "target", "Weight")
## We define the set of nodes interesting for our condition
sucesses <- unique(c(gsub("_.*","",CarnivalNetwork$source),
gsub("_.*","",CarnivalNetwork$target)))
CarnivalAttributes <- as.data.frame(CarnivalResults$nodesAttributes,
stringsAsFactors = FALSE)
## We define the background as all the genes in our prior knowledge network.
bg <- unique(gsub("_.*","",CarnivalAttributes$Node))
Kin_activity_PDTs <-
as.data.frame(readRDS("Results/Kin_activity_PDTs.rds"))
Condition_UnderStudy <- "LNCaP_noInhib_t1_EGF"
Kin_activity_condition <- Kin_activity_PDTs  %>%
dplyr::select(Condition_UnderStudy)
kinases <- as.data.frame(Kin_activity_condition)
pathways <- gmt_to_csv("/Data/c2.cp.v7.0.symbols.gmt")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(piano)
library(dplyr)
library(omicToolsTest)
library(ggplot2)
CarnivalResults <- readRDS("Results/CarnivalResults.rds")
CarnivalNetwork <- as.data.frame(CarnivalResults$weightedSIF, stringsAsFactors = FALSE)
colnames(CarnivalNetwork) <- c("source", "sign", "target", "Weight")
## We define the set of nodes interesting for our condition
sucesses <- unique(c(gsub("_.*","",CarnivalNetwork$source),
gsub("_.*","",CarnivalNetwork$target)))
CarnivalAttributes <- as.data.frame(CarnivalResults$nodesAttributes,
stringsAsFactors = FALSE)
## We define the background as all the genes in our prior knowledge network.
bg <- unique(gsub("_.*","",CarnivalAttributes$Node))
Kin_activity_PDTs <-
as.data.frame(readRDS("Results/Kin_activity_PDTs.rds"))
Condition_UnderStudy <- "LNCaP_noInhib_t1_EGF"
Kin_activity_condition <- Kin_activity_PDTs  %>%
dplyr::select(Condition_UnderStudy)
kinases <- as.data.frame(Kin_activity_condition)
pathways <- gmt_to_csv("Data/c2.cp.v7.0.symbols.gmt")
## We run GSA hyper Geometric test
sig_pathways <- runGSAhyper(sucesses, universe = bg, gsc = loadGSC(pathways))
sig_pathways_df <- as.data.frame(sig_pathways$resTab)
## We map the kinase activity into the resulting enriched pathways
sig_pathways_df$sign <-
unlist(lapply(row.names(sig_pathways_df), function(x, kinases, pathways){
return(mean(kinases[row.names(kinases) %in% pathways[pathways$term == x,1],1]))
},kinases = kinases, pathways = pathways))
sig_pathways_df <- sig_pathways_df[!is.nan(sig_pathways_df$sign),]
sig_pathways_df
head(sig_pathways_df)
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(p-value, Adjusted p-value, sign)
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(p-value, `Adjusted p-value`, sign)
sig_pathways_df
sig_pathways_df$sign
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign)
PathwaysSelect
head8PathwaysSelect
head(PathwaysSelect)
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)  %>%
dplyr::mutate(pathway = row.names(PathwaysSelect))
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)  %>%
tibble::rownames_to_column(pathway)
?rownames_to_column
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)  %>%
tibble::rownames_to_column(var = "pathway")
PathwaysSelect
sig_pathways_df
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)  %>%
tibble::rownames_to_column(var = "pathway")
PathwaysSelect
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(`p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)
PathwaysSelect
sig_pathways_df
rownames(sig_pathways_df)
PathwaysSelect <- sig_pathways_df %>%
tibble::rownames_to_column(var = "pathway") %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)  %>%
;
PathwaysSelect <- sig_pathways_df %>%
tibble::rownames_to_column(var = "pathway") %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)
PathwaysSelect
;
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(piano)
library(dplyr)
library(omicToolsTest)
library(ggplot2)
CarnivalResults <- readRDS("Results/CarnivalResults.rds")
CarnivalNetwork <- as.data.frame(CarnivalResults$weightedSIF, stringsAsFactors = FALSE)
colnames(CarnivalNetwork) <- c("source", "sign", "target", "Weight")
## We define the set of nodes interesting for our condition
sucesses <- unique(c(gsub("_.*","",CarnivalNetwork$source),
gsub("_.*","",CarnivalNetwork$target)))
CarnivalAttributes <- as.data.frame(CarnivalResults$nodesAttributes,
stringsAsFactors = FALSE)
## We define the background as all the genes in our prior knowledge network.
bg <- unique(gsub("_.*","",CarnivalAttributes$Node))
Kin_activity_PDTs <-
as.data.frame(readRDS("Results/Kin_activity_PDTs.rds"))
Condition_UnderStudy <- "LNCaP_noInhib_t1_EGF"
Kin_activity_condition <- Kin_activity_PDTs  %>%
dplyr::select(Condition_UnderStudy)
kinases <- as.data.frame(Kin_activity_condition)
pathways <- gmt_to_csv("Data/c2.cp.v7.0.symbols.gmt")
## We run GSA hyper Geometric test
sig_pathways <- runGSAhyper(sucesses, universe = bg, gsc = loadGSC(pathways))
sig_pathways_df <- as.data.frame(sig_pathways$resTab)
## We map the kinase activity into the resulting enriched pathways
sig_pathways_df$sign <-
unlist(lapply(row.names(sig_pathways_df), function(x, kinases, pathways){
return(mean(kinases[row.names(kinases) %in% pathways[pathways$term == x,1],1]))
},kinases = kinases, pathways = pathways))
sig_pathways_df <- sig_pathways_df[!is.nan(sig_pathways_df$sign),]
PathwaysSelect <- sig_pathways_df[,c(1,2,7)]
PathwaysSign <- PathwaysSelect[PathwaysSelect$`Adjusted p-value` <= 0.0001,]
PathwaysSign$pathway <- row.names(PathwaysSign)
PathwaysSign <- PathwaysSign[,c(4,1,2,3)]
colnames(PathwaysSign) <- c("pathway","pvalue","AdjPvalu","sign")
PathwaysSign$pathway <- as.factor(PathwaysSign$pathway )
PathwaysSelect <- sig_pathways_df %>%
tibble::rownames_to_column(var = "pathway") %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, sign) %>%
dplyr::filter(`Adjusted p-value` <= 0.0001)
colnames(PathwaysSelect) <- c("pathway","pvalue","AdjPvalu","sign")
PathwaysSelect$pathway <- as.factor(PathwaysSelect$pathway )
Interesting_pathways <- c("KEGG_PROGESTERONE_MEDIATED_OOCYTE_MATURATION",
"KEGG_PROSTATE_CANCER",
"REACTOME_EXTRA_NUCLEAR_ESTROGEN_SIGNALING")
ggplot(PathwaysSign, aes(x = reorder(pathway, pvalue), y = -log10(pvalue) , fill=sign)) +
geom_col() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1,
colour = ifelse(levels(reorder(PathwaysSign$pathway, PathwaysSign$pvalue)) %in%
Interesting_pathways, "red", "grey40"),
face = ifelse(levels(reorder(PathwaysSign$pathway, PathwaysSign$pvalue)) %in%
Interesting_pathways, "bold", "plain")),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("")
ggplot(PathwaysSign, aes(x = reorder(pathway, pvalue), y = -log10(pvalue) , fill=sign)) +
geom_col() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1,
colour = ifelse(levels(reorder(PathwaysSign$pathway, PathwaysSign$pvalue)) %in%
Interesting_pathways, "red", "grey40"),
face = ifelse(levels(reorder(PathwaysSign$pathway, PathwaysSign$pvalue)) %in%
Interesting_pathways, "bold", "plain")),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("")
?ggsave
?gmt_to_csv
gmt_to_csv
rm(list=ls());cat('\014');if(length(dev.list()>0)){dev.off()}
library(OmnipathR)
library(dplyr)
library(readr)
setwd("/home/alvaldeolivas/Documents/GitHub/Saezlab/prostate-phosphoSWATH_V2/")
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
covariate_vars <- c("Intercept","ms_day180409", "ms_day180410", "ms_day180412",
"ms_day180414", "Culture_batch", "fraction_missing", "LNCaP")
## From linear model to Matrix suitable to run Viper.
LinearModelData_df_Clean <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::filter(GeneSymbol_Residue != "NA_TNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
## Most variable genes (Phosposites)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::top_n(500) %>%
dplyr::select(GeneSymbol_Residue)
MatrixStatistic <-
dplyr::semi_join(LinearModelData_df_Clean,MostVariableSites) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
corMatrix <-
cor(t(MatrixStatistic), use = "pairwise.complete.obs",method = c("pearson"))
corGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x >= 0.5,1,0)})
AnticorGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x <= -0.5,1,0)})
corGraph_AdjMatrix
HEAD(AnticorGraph_AdjMatrix)
AnticorGraph_AdjMatrix <- apply(corMatrix, 2, function(x){ ifelse(x <= -0.5,1,0)})
head(AnticorGraph_AdjMatrix)
AnticorGraph_AdjMatrix[1:10,1:10]
corGraph_AdjMatrix[1:10,1:10]
dim(corGraph_AdjMatrix)
library(igraph)
?graph_from_adjacency_matrix
### We transform from tha adjacency matrix to a graph and we apply clustering
### methods:
corGraph_igraph <- graph_from_adjacency_matrix(corGraph_AdjMatrix,
mode = c("undirected"), diag = FALSE)
corGraph_igraph
library(bc3net)
getgcc
clusters(corGraph_igraph)
corGraph_igraph <- getgcc(corGraph_igraph)
corGraph_igraph
cluster_louvain(corGraph_igraph, weights = NULL)
alberto <- cluster_louvain(corGraph_igraph, weights = NULL)
alberto
alberto$membership
table(alberto$membership)
alberto <- cluster_infomap(corGraph_igraph, weights = NULL)
alberto <- cluster_infomap(corGraph_igraph)
table(alberto$membership)
alberto <- cluster_infomap(corGraph_igraph, nb.trials = 100)
table(alberto$membership)
alberto <- cluster_fast_greedy(corGraph_igraph)
table(alberto$membership)
alberto <- cluster_label_prop(corGraph_igraph)
table(alberto$membership)
alberto <- cluster_optimal(corGraph_igraph)
alberto <- cluster_walktrap(corGraph_igraph)
table(alberto$membership)
alberto <- cluster_walktrap(corGraph_igraph, steps = 6)
table(alberto$membership)
alberto <- cluster_walktrap(corGraph_igraph, steps = 10)
table(alberto$membership)
alberto <- cluster_leading_eigen(corGraph_igraph, steps = -1)
table(alberto$membership)
alberto <- cluster_leading_eigen(corGraph_igraph, steps = 10)
table(alberto$membership)
cluster_spinglass(corGraph_igraph, weights = NULL, vertex = NULL, spins = 25,
parupdate = FALSE, start.temp = 1, stop.temp = 0.01,
cool.fact = 0.99)
alberto <- cluster_spinglass(corGraph_igraph, weights = NULL, vertex = NULL,
spins = 25, parupdate = FALSE, start.temp = 1, stop.temp = 0.01,
cool.fact = 0.99)
table(alberto$membership)
corGraph_AdjMatrix <-
apply(corMatrix, 2, function(x){ ifelse(x >= 0.7,1,0)})
AnticorGraph_AdjMatrix <-
apply(corMatrix, 2, function(x){ ifelse(x <= -0.7,1,0)})
### We transform from tha adjacency matrix to a graph and we apply clustering
### methods:
corGraph_igraph <- graph_from_adjacency_matrix(corGraph_AdjMatrix,
mode = c("undirected"), diag = FALSE)
clusters(corGraph_igraph)
corGraph_igraph <- getgcc(corGraph_igraph)
alberto <- cluster_louvain(corGraph_igraph)
table(alberto$membership)
## Sizes of the modules we want to consider.
smallest_size <- 5
largest_size <- 40
Modules <- cluster_louvain(corGraph_igraph)
iter <- 0
while (max(sapply(Modules[],length)) >= largest_size && iter <= 100) {
iter <-iter +1
print (iter)
NewModules <- IterativeLouvain(Modules,corGraph_igraph,smallest_size,largest_size)
Modules <- NewModules
}
IterativeLouvain <- function(x,OriginalNetwork,minSize,maxSize) {
a <- 0
n <- length(x)
newList <- list()
for (i in seq(n)){
currentGenes <- x[[i]]
if (length(currentGenes) >= minSize){
if(length(currentGenes) <= maxSize){
a <- a + 1
newList[a]  <-x[i]
} else {
Subnetwork <-induced_subgraph(OriginalNetwork, currentGenes)
Modules_rec <- cluster_louvain(Subnetwork, weights = E(Subnetwork)$weight)
m <- length(Modules_rec)
for (j in seq(m)){
if (length(Modules_rec[[j]]) >= minSize ){
a <- a + 1
newList[[a]] <- Modules_rec[[j]]
}
}
}
}
}
return(newList)
}
## Sizes of the modules we want to consider.
smallest_size <- 5
largest_size <- 40
Modules <- cluster_louvain(corGraph_igraph)
iter <- 0
while (max(sapply(Modules[],length)) >= largest_size && iter <= 100) {
iter <-iter +1
print (iter)
NewModules <- IterativeLouvain(Modules,corGraph_igraph,smallest_size,largest_size)
Modules <- NewModules
}
Modules
