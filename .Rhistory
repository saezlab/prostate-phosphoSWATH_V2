theme_minimal() + ggtitle("abl")   +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
grid.arrange(pA, pB, ncol=2)
SitesModule
SitesModule <- Modules[[11]]
ConditionA <- c("LNCaP_noInhib_t0_noLigand", "LNCaP_noInhib_t1_EGF","LNCaP_noInhib_t2_EGF")
ConditionB <- c("abl_noInhib_t0_noLigand", "abl_noInhib_t1_EGF","abl_noInhib_t2_EGF")
LinearModelData_df_SelectA <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionA, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
LinearModelData_df_SelectB <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionB, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
pA <- ggplot(data=LinearModelData_df_SelectA, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
geom_text(aes(label = GeneSymbol_Residue)) +
theme_minimal() + ggtitle("LNCaP") +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
pB <- ggplot(data=LinearModelData_df_SelectB, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("abl")   +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
grid.arrange(pA, pB, ncol=2)
SitesModule
pA <- ggplot(data=LinearModelData_df_SelectA, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("LNCaP") +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
pB <- ggplot(data=LinearModelData_df_SelectB, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("abl")   +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
grid.arrange(pA, pB, ncol=2)
SitesModule <- Modules[[21]]
ConditionA <- c("LNCaP_noInhib_t0_noLigand", "LNCaP_noInhib_t1_EGF","LNCaP_noInhib_t2_EGF")
ConditionB <- c("abl_noInhib_t0_noLigand", "abl_noInhib_t1_EGF","abl_noInhib_t2_EGF")
LinearModelData_df_SelectA <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionA, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
LinearModelData_df_SelectB <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionB, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
pA <- ggplot(data=LinearModelData_df_SelectA, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("LNCaP") +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
pB <- ggplot(data=LinearModelData_df_SelectB, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("abl")   +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
grid.arrange(pA, pB, ncol=2)
SitesModule
knitr::opts_chunk$set(echo = TRUE)
library(OmnipathR)
library(dplyr)
library(readr)
library(igraph)
library(bc3net)
library(ggplot2)
library(gridExtra)
ResultsLinearModel <- read_tsv("Data/limma_model_results_20190301.tsv")
LinearModelData_df <- ResultsLinearModel %>%
dplyr::filter(!is.na(residues_str)) %>%
dplyr::mutate(residues_str = strsplit(residues_str, "_")) %>%
tidyr::unnest(residues_str) %>%
dplyr::mutate(GeneSymbol_Residue = paste(GeneSymbol, residues_str, sep="_"))
covariate_vars <- c("Intercept","ms_day180409", "ms_day180410", "ms_day180412",
"ms_day180414", "Culture_batch", "fraction_missing", "LNCaP")
## From linear model to Matrix suitable to run Viper.
LinearModelData_df_Clean <-
LinearModelData_df %>%
dplyr::select(statistic,GeneSymbol_Residue, term, p.value) %>%
dplyr::filter(!(term %in% covariate_vars)) %>%
dplyr::filter(GeneSymbol_Residue != "NA_SNA") %>%
dplyr::filter(GeneSymbol_Residue != "NA_TNA") %>%
dplyr::group_by(GeneSymbol_Residue, term) %>%
dplyr::filter(p.value == min(p.value)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::select(-p.value)
MostVariableSites <- LinearModelData_df_Clean %>%
dplyr::group_by(GeneSymbol_Residue) %>%
dplyr::mutate(variance = var(statistic))  %>%
dplyr::arrange(desc(variance)) %>%
dplyr::distinct(GeneSymbol_Residue, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::top_n(500) %>%
dplyr::select(GeneSymbol_Residue)
MatrixStatistic <-
dplyr::semi_join(LinearModelData_df_Clean,MostVariableSites) %>%
tidyr::pivot_wider(names_from = term, values_from = statistic)  %>%
tibble::column_to_rownames(var = "GeneSymbol_Residue") %>%
as.matrix()
corMatrix <-
cor(t(MatrixStatistic), use = "pairwise.complete.obs",method = c("pearson"))
corGraph_AdjMatrix <-
apply(corMatrix, 2, function(x){ ifelse(x >= 0.7,1,0)})
AnticorGraph_AdjMatrix <-
apply(corMatrix, 2, function(x){ ifelse(x <= -0.7,1,0)})
## Transform to an igraph object
corGraph_igraph <- graph_from_adjacency_matrix(corGraph_AdjMatrix,
mode = c("undirected"), diag = FALSE)
## I get the largest connected component of the graph:
corGraph_igraph <- getgcc(corGraph_igraph)
## Function to Perform an iterative Louvain Clustering.
IterativeLouvain <- function(x,OriginalNetwork,minSize,maxSize) {
a <- 0
n <- length(x)
newList <- list()
for (i in seq(n)){
currentGenes <- x[[i]]
if (length(currentGenes) >= minSize){
if(length(currentGenes) <= maxSize){
a <- a + 1
newList[a]  <-x[i]
} else {
Subnetwork <-induced_subgraph(OriginalNetwork, currentGenes)
Modules_rec <- cluster_louvain(Subnetwork, weights = E(Subnetwork)$weight)
m <- length(Modules_rec)
for (j in seq(m)){
if (length(Modules_rec[[j]]) >= minSize ){
a <- a + 1
newList[[a]] <- Modules_rec[[j]]
}
}
}
}
}
return(newList)
}
## We define the size of the modules and the maximun number of iterations.
smallest_size <- 5
largest_size <- 40
iter <- 0
## First Louvain clustering to obtain the first modules
Modules <- cluster_louvain(corGraph_igraph)
## Iterative clusters to split the first modules into smaller clusters.
while (max(sapply(Modules[],length)) >= largest_size && iter <= 100) {
iter <-iter +1
# print (iter)
NewModules <- IterativeLouvain(Modules,corGraph_igraph,smallest_size,largest_size)
Modules <- NewModules
}
## I select my conditions of interest
ConditionA <-
c("LNCaP_noInhib_t0_noLigand", "LNCaP_noInhib_t1_EGF","LNCaP_noInhib_t2_EGF")
ConditionB <-
c("abl_noInhib_t0_noLigand", "abl_noInhib_t1_EGF","abl_noInhib_t2_EGF")
## I take as an one of our modules:
SitesModule <- Modules[[21]]
SitesModule
## We extract the info for these conditions
LinearModelData_df_SelectA <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionA, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
LinearModelData_df_SelectB <- LinearModelData_df_Clean %>%
dplyr::filter(term %in% ConditionB, GeneSymbol_Residue %in% SitesModule) %>%
dplyr::mutate(time = ifelse(grepl("_t0_", term), "t0",
ifelse(grepl("_t1_", term), "t1","t2")))
pA <- ggplot(data=LinearModelData_df_SelectA, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("LNCaP + EGF") +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
pB <- ggplot(data=LinearModelData_df_SelectB, aes(x=time, y=statistic, group=GeneSymbol_Residue)) +
geom_line(alpha = 0.5, color = "blue", linetype = "dashed", size= 1.5) +
geom_point(alpha = 0.5, size = 3,  color = "blue") +
theme_minimal() + ggtitle("abl + EGF")   +
theme(plot.title = element_text(size = 20, face = "bold", colour = "red",
hjust = 0.5))
grid.arrange(pA, pB, ncol=2)
library(OmnipathR)
?import_Omnipath_Interactions
head(get_interaction_databases(),10)
head(get_interaction_databases(),10)
import_Omnipath_Interactions(filter_databases=c("BioGRID"),select_organism = 9606)
get_interaction_databases()
alberto <-
import_Omnipath_Interactions(filter_databases=c("HPRD"),select_organism = 9606)
alberto
colnames(alberto)
df_interactions <- alberto
df_interactions %>%
dplyr::select(source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition, references)
df_interactions %>%
dplyr::select(source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition, references) %>%
dplyr::rename(source = "source_genesymbol", target = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions %>%
dplyr::select(source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition) %>%
dplyr::rename(source = "source_genesymbol", target = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions <- df_interactions %>%
dplyr::select(source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition) %>%
dplyr::rename(source = "source_genesymbol", target = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions[10:16,]
df_interactions[26:32,]
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition) %>%
dplyr::rename(source = "source_genesymbol", target = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)
df_interactions <-
import_Omnipath_Interactions(filter_databases=c("HPRD"),select_organism = 9606)
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)
df_interactions_visual[26:32]
df_interactions_visual[26:32,]
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)  %>%
dplyr::rename(direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions_visual
print(df_interactions_visual)
import_Omnipath_intercell
get_intercell_categories()
library(VennDiagram)
?draw.single.venn
?draw.pairwise.venn
library(OmnipathR)
library(dplyr)
library(VennDiagram)
df_interactions <-
import_Omnipath_Interactions(
filter_databases=c("HPRD"),
select_organism = 9606)
head(get_interaction_databases())
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)  %>%
dplyr::rename(source_symbol = "source_genesymbol",
target_symbol = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions_visual[26:32,]
lr_Network_Omnipath <- import_LigrecExtra_Interactions()
lr_Network_Omnipath[1:6,c(3,4,5,6,7)]
lr_Network_Omnipath_Unique <- lr_Network_Omnipath %>%
dplyr::distinct(source_genesymbol,target_genesymbol) %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol)
nrow(lr_Network_Omnipath_Unique)
## We import Omnipath Inter cellular annotations
head(get_intercell_categories())
InterCell_Annotations <- import_Omnipath_intercell()
## We filter those proteins which are mainly annotated as receptor or ligand
Ligands_Receptors <- InterCell_Annotations %>%
dplyr::filter(mainclass %in% c("receptor","ligand"))
## We import Omnipath Inter cellular annotations
InterCell_Annotations <- import_Omnipath_intercell()
## We filter those proteins which are mainly annotated as receptor or ligand
Ligands_Receptors <- InterCell_Annotations %>%
dplyr::filter(mainclass %in% c("receptor","ligand"))
## There are also some complexes. We are going to deal with them by including
## each of its individual proteins in our list
Ligand_Receptors_class <- character()
Ligand_Receptors_name <- character()
for (i in seq(nrow(Ligands_Receptors))){
if (Ligands_Receptors$entity_type[i] == "complex"){
Genescomplex <-unlist(strsplit(gsub("COMPLEX:", "",
Ligands_Receptors$genesymbol[i]),"_"))
class <- rep(Ligands_Receptors$mainclass[i],length(Genescomplex))
Ligand_Receptors_name <- c(Ligand_Receptors_name,Genescomplex)
Ligand_Receptors_class <- c(Ligand_Receptors_class,class)
} else {
Ligand_Receptors_name <-
c(Ligand_Receptors_name, Ligands_Receptors$genesymbol[i])
Ligand_Receptors_class <-
c(Ligand_Receptors_class, Ligands_Receptors$mainclass[i])
}
}
Ligand_Receptors_df <- data.frame(GeneSymbol = Ligand_Receptors_name,
Class = Ligand_Receptors_class, stringsAsFactors = FALSE) %>%
dplyr::distinct()
AllLigands_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "ligand") %>%
dplyr::pull(GeneSymbol)
AllReceptors_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "receptor") %>%
dplyr::pull(GeneSymbol)
AllInteractions <- bind_rows(
(import_Omnipath_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol)),
(import_Omnipath_PTMS() %>%
dplyr::select(enzyme_genesymbol, substrate_genesymbol) %>%
dplyr::rename(source_genesymbol = enzyme_genesymbol,
target_genesymbol = substrate_genesymbol)),
(import_KinaseExtra_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol)),
(import_PathwayExtra_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol))) %>%
dplyr::distinct() %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol)
## Do the other way around? I only used from=ligands and to=receptors
Matching_Interactions_Annotations <-   AllInteractions %>%
dplyr::filter(from %in% AllLigands_vec) %>%
dplyr::filter(to %in% AllReceptors_vec) %>%
dplyr::distinct()
nrow(Matching_Interactions_Annotations)
## [1] 8346
lr_Network_Nichenet_Unique
Venn_plot <- draw.pairwise.venn(are1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("Omnipath: LigRecExtra", "Omnipath: Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 2), cat.cex = 1.25)
library(OmnipathR)
library(dplyr)
library(VennDiagram)
df_interactions <-
import_Omnipath_Interactions(
filter_databases=c("HPRD"),
select_organism = 9606)
head(get_interaction_databases())
df_interactions_visual <- df_interactions %>%
dplyr::select(source, target, source_genesymbol,target_genesymbol, consensus_direction, consensus_stimulation,
consensus_inhibition)  %>%
dplyr::rename(source_symbol = "source_genesymbol",
target_symbol = "target_genesymbol",
direction = "consensus_direction",
stimulation = "consensus_stimulation",
inhibition = "consensus_inhibition")
df_interactions_visual[26:32,]
lr_Network_Omnipath <- import_LigrecExtra_Interactions()
lr_Network_Omnipath[1:6,c(3,4,5,6,7)]
lr_Network_Omnipath_Unique <- lr_Network_Omnipath %>%
dplyr::distinct(source_genesymbol,target_genesymbol) %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol)
nrow(lr_Network_Omnipath_Unique)
## We import Omnipath Inter cellular annotations
head(get_intercell_categories())
InterCell_Annotations <- import_Omnipath_intercell()
## We filter those proteins which are mainly annotated as receptor or ligand
Ligands_Receptors <- InterCell_Annotations %>%
dplyr::filter(mainclass %in% c("receptor","ligand"))
## We import Omnipath Inter cellular annotations
InterCell_Annotations <- import_Omnipath_intercell()
## We filter those proteins which are mainly annotated as receptor or ligand
Ligands_Receptors <- InterCell_Annotations %>%
dplyr::filter(mainclass %in% c("receptor","ligand"))
## There are also some complexes. We are going to deal with them by including
## each of its individual proteins in our list
Ligand_Receptors_class <- character()
Ligand_Receptors_name <- character()
for (i in seq(nrow(Ligands_Receptors))){
if (Ligands_Receptors$entity_type[i] == "complex"){
Genescomplex <-unlist(strsplit(gsub("COMPLEX:", "",
Ligands_Receptors$genesymbol[i]),"_"))
class <- rep(Ligands_Receptors$mainclass[i],length(Genescomplex))
Ligand_Receptors_name <- c(Ligand_Receptors_name,Genescomplex)
Ligand_Receptors_class <- c(Ligand_Receptors_class,class)
} else {
Ligand_Receptors_name <-
c(Ligand_Receptors_name, Ligands_Receptors$genesymbol[i])
Ligand_Receptors_class <-
c(Ligand_Receptors_class, Ligands_Receptors$mainclass[i])
}
}
Ligand_Receptors_df <- data.frame(GeneSymbol = Ligand_Receptors_name,
Class = Ligand_Receptors_class, stringsAsFactors = FALSE) %>%
dplyr::distinct()
AllLigands_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "ligand") %>%
dplyr::pull(GeneSymbol)
AllReceptors_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "receptor") %>%
dplyr::pull(GeneSymbol)
AllInteractions <- bind_rows(
(import_Omnipath_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol)),
(import_Omnipath_PTMS() %>%
dplyr::select(enzyme_genesymbol, substrate_genesymbol) %>%
dplyr::rename(source_genesymbol = enzyme_genesymbol,
target_genesymbol = substrate_genesymbol)),
(import_KinaseExtra_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol)),
(import_PathwayExtra_Interactions() %>%
dplyr::select(source_genesymbol, target_genesymbol))) %>%
dplyr::distinct() %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol)
## Do the other way around? I only used from=ligands and to=receptors
Matching_Interactions_Annotations <-   AllInteractions %>%
dplyr::filter(from %in% AllLigands_vec) %>%
dplyr::filter(to %in% AllReceptors_vec) %>%
dplyr::distinct()
nrow(Matching_Interactions_Annotations)
## [1] 8346
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("Omnipath: LigRecExtra", "Omnipath: Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 2), cat.cex = 1.25)
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=1.25,
cat.dist = rep(0.075, 2), cat.cex = 1.25)
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 1.25)
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 2)
grid.draw(Venn_plot)
?draw.pairwise.venn
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 2,
cat.pos = c(90,270))
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 2,
cat.pos = c(270,90))
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 1.5,
cat.pos = c(0,180))
grid.draw(Venn_plot)
Venn_plot <- draw.pairwise.venn(area1 = nrow(lr_Network_Omnipath_Unique),
area2 = nrow(Matching_Interactions_Annotations),
cross.area = nrow(dplyr::intersect(lr_Network_Omnipath_Unique,
Matching_Interactions_Annotations)),
category = c("LigRecExtra", "Interactions + Annotations"),
lty = rep("blank", 2), fill = c("light blue", "red"),
alpha = rep(0.25, 2), euler.d = TRUE, scaled=TRUE,
rotation.degree = 0, reverse=TRUE, cex=2, cat.cex = 1.75,
cat.pos = c(0,180))
grid.draw(Venn_plot)
grid.draw(Venn_plot)
